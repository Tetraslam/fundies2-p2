Changes to Sokoban Implementation

The original Sokoban implementation was modified to meet several requirements. Here are the key changes made:

1. Removal of Enums:
   - Converted Direction and GameColor enums to classes with string fields
   - Added equals/hashCode methods for proper equality comparison
   - Created factory classes (DirectionFactory, GameColorFactory) to manage instances

2. Type-Safe Runtime Type Checking:
   - Removed all instanceof checks and casting operations
   - Added isEmptyGround(), isHoleGround(), etc. methods to IGroundType
   - Added isEmptyContent(), isWallContent(), etc. methods to ICellContent
   - Updated all type checks to use these methods instead

3. ArrayList Usage:
   - Removed all array usages (String[], etc.)
   - Added stringToList helper method to convert string arrays to ArrayLists
   - Used proper generic types for all collections

4. Improved Error Handling:
   - Changed getCell and setCell to throw exceptions for out-of-bounds access
   - Added proper boundary checks before accessing cells
   - Added isOutOfBounds helper method for position validation
   - Added try-catch blocks for robust error handling

5. Object Behavior Changes:
   - Made trophies on targets still movable
   - Fixed checkWin logic to properly check all targets
   - Added handling for objects on holes at level construction
   - Made objects disappear when placed on holes during initialization
   - Corrected player position tracking when player falls in hole at construction

6. Image Scaling:
   - Added ScaleImageXY for all images to handle 120x120 px images
   - Scaled to 40x40 px (cell size) using 40.0/120.0 scale factor

7. Testing:
   - Added specific tests for boundary conditions
   - Added tests for object-on-hole initialization
   - Added tests for trophy-on-target movability
   - Added tests for exception handling
   - Added tests for helper methods (stringToList, etc.)

These changes make the code more robust while maintaining all functionality. The updated code follows best practices for object-oriented design by avoiding type casting and using proper interfaces and type-checking methods.